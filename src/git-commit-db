#! /usr/bin/env luajit2

pcall(require, 'luarocks.require')

pcall(require, 'socket')
-- TODO: Support unix domain sockets
-- pcall(require, 'socket.unix')

local tokyotyrant = require 'tokyotyrant'

require 'lua-nucleo.module'
require 'lua-nucleo.strict'

--------------------------------------------------------------------------------

local ordered_pairs
    = import 'lua-nucleo/tdeepequals.lua'
    {
      'ordered_pairs'
    }

local tstr
    = import 'lua-nucleo/tstr.lua'
    {
      'tstr'
    }

--------------------------------------------------------------------------------

local Q = function(s)
  return ("%q"):format(s)
end

--------------------------------------------------------------------------------

local tbl_connect = function(tyrant_host, tyrant_port, tbl)
  if tbl then
    tbl:close()
  else
    tbl = tokyotyrant.tbldb.new()
  end

  if tyrant_port then
    tbl:open(tyrant_host, tyrant_port)
  else
    local socket_path = tyrant_host
    tbl:openunix(socket_path)
  end

  return tbl
end

--------------------------------------------------------------------------------

local actions = { }

--------------------------------------------------------------------------------

actions.help = function()
  io.stdout:write("Usage:\n")
  io.stdout:write("\n")
  io.stdout:write("   git-commit-db <action> [options]\n")
  io.stdout:write("\n")
  io.stdout:write("Actions:\n")
  io.stdout:write("\n")

  for name, _ in ordered_pairs(actions) do
    io.stdout:write(" * ", name, "\n")
  end

  io.stdout:write("\n")
  io.stdout:flush()
end

--------------------------------------------------------------------------------

actions.init_table = function(...)
  local tbl

  do
    local nargs = select("#", ...)
    if nargs == 1 then
      local tyrant_socket = ...
      tbl = tbl_connect(tyrant_socket)
    elseif nargs == 2 then
      local tyrant_host, tyrant_port = ...
      tbl = tbl_connect(tyrant_host, tyrant_port)
    else
      io.stdout:write("Usage:\n")
      io.stdout:write("\n")
      io.stdout:write(
          "   git-commit-db init {<tyrant_port>",
          " <tyrant_host>|<tyrant_socket>}\n"
        )
      io.stdout:flush()
      return
    end
  end

  tbl:setindex("author", "lexical")
  tbl:setindex("timestamp", "decimal")
end

--------------------------------------------------------------------------------

actions.collect = function(...)
  local tbl
  local repo_name, path_to_repository

  do
    local nargs = select("#", ...)
    if nargs == 3 then
      local tyrant_socket
      tyrant_socket, repo_name, path_to_repository = ...
      tbl = tbl_connect(tyrant_socket)
    elseif nargs == 4 then
      local tyrant_host, tyrant_port
      tyrant_host, tyrant_port, repo_name, path_to_repository = ...
      tbl = tbl_connect(tyrant_host, tyrant_port)
    else
      io.stdout:write("Usage:\n")
      io.stdout:write("\n")
      io.stdout:write(
          "   git-commit-db collect",
          " {<tyrant_port> <tyrant_host>|<tyrant_socket>}",
          " <repo_name>",
          " <path_to_repository>\n"
        )
      io.stdout:flush()
      return
    end
  end

  local git_dir = path_to_repository:match("%.git$")
    and path_to_repository
     or (path_to_repository .. "/.git")

  local git = [[git --git-dir=]] .. (Q(git_dir))
  local cmd = git .. [[ rev-list HEAD]] -- TODO: Allow bare repositories.

  local total_count, new_count = 0, 0

  local input = assert(io.popen(cmd, "r"))
  for hash in input:lines() do
    total_count = total_count + 1

    -- TODO: Can it be done without getting the data!?
    if tbl:get(hash) then
      io.stdout:write(". ", hash, "\n")
    else
      new_count = new_count + 1

      local cmd = git .. ' log'
        .. ' -1'
        .. ' --no-merges'
        .. ' --pretty=format:"%at%n\\"%aN\\"%n%aE"'
        .. ' --shortstat'
        .. ' ' .. hash

      local info_input = assert(io.popen(cmd))
      local timestamp, author, email, changes = info_input:read(
          "*l", "*l", "*l", "*l"
        )
      local files_changed, lines_added, lines_removed

      if not changes then
        io.stdout:flush()
--[[
        io.stderr:write(
            "WARNING: Weird output line for commit ", hash,
            " can't read changes:\n",
            timestamp, "\n",
            author, "\n",
            email, "\n",
            "\n",
            "command: ", cmd, "\n"
          )
--]]
        io.stderr:write("? ", hash, " : empty commit\n")
        io.stderr:flush()

        files_changed, lines_added, lines_removed = 0, 0, 0
      else
        io.stdout:write("+ ", hash, "\n")

        files_changed, lines_added, lines_removed = changes:match(
            "^"
         .. "%s*(%d+)%s+files%s+changed,"
         .. "%s+(%d+)%s+insertions%s*%(%+%),"
         .. "%s+(%d+)%s+deletions%s*%(%-%)"
         .. "%s*$"
          )
      end

      info_input:close()
      info_input = nil

      tbl:put(
          hash,
          {
            repo_name = repo_name;
            timestamp = timestamp;
            author = author;
            email = email;
            files_changes = tostring(files_changed);
            lines_added = tostring(lines_added);
            lines_removed = tostring(lines_removed);
            lines_changed = tostring(lines_added + lines_removed);
          }
        )
    end
  end
  input:close()

  io.stdout:write("\n")
  io.stdout:write(
      "Done (total: ", total_count, ", new: ", new_count, " commits)\n"
    )
  io.stdout:write("\n")

  io.stdout:flush()
end

--------------------------------------------------------------------------------

actions.dump = function(...)
  local tbl

  do
    local nargs = select("#", ...)
    if nargs == 1 then
      local tyrant_socket = ...
      tbl = tbl_connect(tyrant_socket)
    elseif nargs == 2 then
      local tyrant_host, tyrant_port = ...
      tbl = tbl_connect(tyrant_host, tyrant_port)
    else
      io.stdout:write("Usage:\n")
      io.stdout:write("\n")
      io.stdout:write(
          "   git-commit-db dump {<tyrant_port>",
          " <tyrant_host>|<tyrant_socket>}\n"
        )
      io.stdout:flush()
      return
    end
  end

  for hash, data in tbl:pairs() do
    io.stdout:write(hash, " ", tstr(data), "\n")
  end

  io.stdout:flush()
end

--------------------------------------------------------------------------------

actions.list_changes = function(...)
  local tbl
  local author_email -- TODO: Allow more filtering

  do
    local nargs = select("#", ...)
    if nargs == 2 then
      local tyrant_socket
      tyrant_socket, author_email = ...
      tbl = tbl_connect(tyrant_socket)
    elseif nargs == 3 then
      local tyrant_host, tyrant_port
      tyrant_host, tyrant_port, author_email = ...
      tbl = tbl_connect(tyrant_host, tyrant_port)
    else
      io.stdout:write("Usage:\n")
      io.stdout:write("\n")
      io.stdout:write(
          "   git-commit-db list_changes {<tyrant_port>",
          " <tyrant_host>|<tyrant_socket>} <author_email>\n"
        )
      io.stdout:flush()
      return
    end
  end

  local hashes = tbl:search(tokyotyrant.query.new():addcond("email", "streq", author_email))

  if not hashes or #hashes == 0 then
    io.stderr:write("not found\n")
    io.stderr:flush()
    return os.exit(1)
  end

  for i = 1, #hashes do
    local row = assert(tbl:get(hashes[i]))
    io.stdout:write(row.timestamp, "\t", row.lines_added, "\t", row.lines_removed, "\n")
  end

  io.stdout:flush()
end

--------------------------------------------------------------------------------

(actions[select(1, ...)] or actions["help"])(select(2, ...))
